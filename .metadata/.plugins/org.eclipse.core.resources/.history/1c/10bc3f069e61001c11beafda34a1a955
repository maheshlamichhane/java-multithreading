
public class Test {
	
	/*
	 	Synchronizer is the modifier applicable only for methods and blocks,but not for
	 	classes and variables.
	 	
	 	if multiple threads are trying to operate simultaneously on the same java object
	 	then there may be a chance of data inconsistency problem.to overcome this problem
	 	we should go for synchronizer keyword.
	 	
	 	if  method or block declared as a synchronizer then at a time only one thread is 
	 	allowed to exectue that method or block and the given object so that data inconsistency
	 	problem will be resolved.
	 	
	 	the main advantage of synchronizer keyword is we can resolve data inconsistency
	 	problems but the main dis-advantage of synchronizer keyword is it increases 
	 	waiting time of thread and creates performance problems.hence if there is no 
	 	specific requirement then it is not recomended to use synchronizer keyword.
	 	
	 	Internally synchronization concept is implemented by using lock.every object in
	 	java has a unique lock.whenever we are using synchronizer keyword then only lock
	 	concept will come into the picture.
	 	
	 	if a thread wants to execute synchronizer method on the given object first it has
	 	to get lock of that object.once theread got the lock it is allowed to execute any 
	 	synchronizer method on that object.once method execution completes automatically thread
	 	releases the lock.acquring and the releasing lock internally takes care by JVM and 
	 	programmer not reponsible for this activity.
	 	
	 	
	 */

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
